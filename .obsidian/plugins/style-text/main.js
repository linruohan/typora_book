/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => StyleText
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  styles: [
    { name: "Super Big", css: "font-size: 28px;", contextMenu: true },
    { name: "Super Big Yellow Highlight", css: "font-size: 28px; background-color: #fff88f; color: black", contextMenu: false },
    { name: "Big", css: "font-size: 24px", contextMenu: false },
    { name: "Big Green Highlight", css: "font-size: 24px; background-color: #1EFF00; color: black", contextMenu: true },
    { name: "Large", css: "font-size: 20px", contextMenu: false },
    { name: "Large Yellow", css: "font-size: 20px; color: yellow", contextMenu: false },
    { name: "Large Orange", css: "font-size: 20px; color: orange", contextMenu: true },
    { name: "Large Red", css: "font-size: 20px; color: red", contextMenu: false },
    { name: "Green Highlight", css: "background-color: #1EFF00; color: black", contextMenu: true },
    { name: "Yellow Highlight", css: "background-color: #fff88f; color: black", contextMenu: true }
  ]
};
var GeneralSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    this.clearHtml();
    containerEl.empty();
    containerEl.createEl("div").createEl("span", { text: "Created by " }).createEl("a", { text: "Juanjo Arranz", href: "https://github.com/juanjoarranz" });
    containerEl.createEl("p", { text: "CSS styles to be applied to the selected text." });
    const settingHeader = containerEl.createDiv({ cls: "setting-header" });
    settingHeader.createDiv({ text: "Name", cls: "name-header" });
    settingHeader.createDiv({ text: "Style", cls: "style-header" });
    let containerButton = settingHeader.createEl("div", { cls: "container_add_button" });
    let addStyleButton = containerButton.createEl("button", { text: "Add Style" });
    const settingContainer = containerEl.createDiv();
    addStyleButton.onclick = (ev) => this.addStyle(settingContainer);
    this.plugin.settings.styles.forEach((s, i) => this.addStyle(settingContainer, i + 1));
    this.addInstructions(containerEl);
    this.donate(containerEl);
  }
  clearHtml() {
    setTimeout(() => {
      removeClass("setting-item");
      removeClass("setting-item-info");
      removeClass("setting-item-control");
      deleteContainer(".setting-item-description");
    }, 0);
    function removeClass(className) {
      document.querySelectorAll("." + className).forEach((i) => i.removeClass(className));
    }
    function deleteContainer(selector) {
      document.querySelectorAll(selector).forEach((i) => {
        var _a;
        return (_a = i.parentElement) == null ? void 0 : _a.remove();
      });
    }
  }
  addStyle(containerEl, counter) {
    this.clearHtml();
    const { styles } = this.plugin.settings;
    const settingItemContainer = containerEl.createDiv({ cls: "setting-item-container" });
    const stylesCounter = counter != null ? counter : styles.length + 1;
    if (!counter) {
      const newStyle = { name: "Large Yellow", css: "font-size: 20px; color: yellow", contextMenu: false };
      styles.push(newStyle);
      this.plugin.addStyleCommand(newStyle, stylesCounter);
      this.plugin.saveSettings();
    }
    const currentStyle = styles[stylesCounter - 1];
    let styleNameInput = settingItemContainer.createEl("input", { cls: "style-text-setting-item-name" });
    styleNameInput.value = currentStyle.name;
    styleNameInput.onchange = async (event) => {
      const value = styleNameInput.value;
      currentStyle.name = value;
      await this.plugin.saveSettings();
      this.plugin.addStyleCommand({
        name: value,
        css: currentStyle.css,
        contextMenu: currentStyle.contextMenu
      }, stylesCounter + 1);
    };
    new import_obsidian.Setting(settingItemContainer).setClass("style-text-setting-item-css").addText((text) => {
      return text.setValue(currentStyle.css).onChange(async (value) => {
        currentStyle.css = value;
        await this.plugin.saveSettings();
        this.plugin.addStyleCommand({
          name: currentStyle.name,
          css: value,
          contextMenu: currentStyle.contextMenu
        }, stylesCounter + 1);
      });
    });
    new import_obsidian.Setting(settingItemContainer).setClass("style-text-setting-item-contextMenu").addToggle((toggle) => {
      toggle.setValue(currentStyle.contextMenu).setTooltip((toggle.getValue() ? "disable" : "enable") + " contex menu").onChange(async () => {
        const value = toggle.getValue();
        toggle.setTooltip((value ? "disable" : "enable") + " contex menu");
        currentStyle.contextMenu = value;
        await this.plugin.saveSettings();
      });
    });
    const upDisabled = stylesCounter - 1 === 0;
    const upButtonContainer = settingItemContainer.createDiv({ cls: "style-text-button-container" });
    if (!upDisabled) {
      const upButton = new import_obsidian.ButtonComponent(upButtonContainer);
      upButton.setIcon("arrow-up").setClass("style-text-delete-style-button").setTooltip("Move up").onClick(() => this.moveStyle("up", stylesCounter, styles));
    }
    const downDisabled = stylesCounter === styles.length;
    const downButtonContainer = settingItemContainer.createDiv({ cls: "style-text-button-container" });
    if (!downDisabled) {
      const downButton = new import_obsidian.ButtonComponent(downButtonContainer);
      downButton.setIcon("arrow-down").setClass("style-text-delete-style-button").setTooltip("Move down").onClick(() => this.moveStyle("down", stylesCounter, styles));
    }
    const deleteButtonContainer = settingItemContainer.createDiv({ cls: "style-text-button-container" });
    const deleteButton = new import_obsidian.ButtonComponent(deleteButtonContainer);
    deleteButton.setIcon("trash-2").setClass("style-text-delete-style-button").setTooltip("Remove Style").onClick(async () => {
      this.plugin.settings.styles.splice(stylesCounter - 1, 1);
      await this.plugin.saveSettings();
      this.display();
    });
    if (!counter)
      setTimeout(() => this.display(), 0);
  }
  async moveStyle(direction, stylesCounter, styles) {
    this.plugin.settings.styles = moveStyle(direction, stylesCounter, styles);
    await this.plugin.saveSettings();
    this.plugin.settings.styles.forEach((style, index) => {
      this.plugin.addStyleCommand(style, index + 1);
    });
    this.display();
    function moveStyle(direction2, stylesCounter2, styles2) {
      const movingStyle = styles2.splice(stylesCounter2 - 1, 1)[0];
      const newPosition = direction2 === "up" ? stylesCounter2 - 2 : stylesCounter2;
      const newStyles = [
        ...styles2.slice(0, newPosition),
        movingStyle,
        ...styles2.slice(newPosition)
      ];
      return newStyles;
    }
  }
  addInstructions(containerEl) {
    const containerInstructions = containerEl.createEl("div", { cls: "container-instructions" });
    containerInstructions.createEl("p", { text: "Usage with the Command Palette:", cls: "instructions" });
    const commandPaletteUl = containerInstructions.createEl("ul", { cls: "instructions" });
    commandPaletteUl.createEl("li", { text: "Select text on the editor" });
    commandPaletteUl.createEl("li", { text: "Open the Command Palette: <Ctrl> or <Cmd> + <P>" });
    commandPaletteUl.createEl("li", { text: 'Look up the Style to apply: "Style Text ..."' });
    commandPaletteUl.createEl("li", { text: "Choose the Style: <Enter>" });
    containerInstructions.createEl("p", { text: "Remove Applied Styles:", cls: "instructions" });
    const removeUl = containerInstructions.createEl("ul", { cls: "instructions" });
    removeUl.createEl("li", { text: "Select the styled text on the editor" });
    removeUl.createEl("li", { text: "Open the Command Palette: <Ctrl> or <Cmd> + <P>" });
    removeUl.createEl("li", { text: 'Look up: "Style Remove"' });
    removeUl.createEl("li", { text: "Press <Enter>" });
  }
  donate(containerEl) {
    const donateContainer = containerEl.createEl("div", { cls: "donate" });
    donateContainer.setCssStyles({ marginTop: "40px" });
    let buyMeCoffeeImage = new Image(130);
    buyMeCoffeeImage.src = "https://cdn.ko-fi.com/cdn/kofi3.png?v=3";
    donateContainer.createEl("a", { href: "https://ko-fi.com/F1F6H4TAR", text: "" }).appendChild(buyMeCoffeeImage);
  }
};

// src/main.ts
var StyleText = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.styleTextInContextMenu = (menu, editor) => {
      const enhancedApp = this.app;
      menu.addItem(
        (item) => item.setTitle("Remove Style").setIcon("eraser").onClick(() => {
          enhancedApp.commands.executeCommandById(`style-text:remove-style`);
        })
      );
      this.settings.styles.forEach((style, index) => {
        if (style.contextMenu) {
          menu.addItem(
            (item) => item.setTitle(style.name).setIcon("highlighter").onClick(() => {
              enhancedApp.commands.executeCommandById(`style-text:style${index + 1}`);
            })
          );
        }
      });
    };
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "remove-style",
      name: "Remove Style",
      editorCallback: (editor, view) => {
        const selection = editor.getSelection();
        editor.replaceSelection(this.betterClearHTMLTags(selection));
      }
    });
    this.settings.styles.forEach((style, index) => {
      this.addStyleCommand(style, index + 1);
    });
    this.registerEvent(
      this.app.workspace.on("editor-menu", this.styleTextInContextMenu)
    );
    this.updateBodyListClass();
    this.addSettingTab(new GeneralSettingsTab(this.app, this));
  }
  async loadSettings() {
    this.settings = { ...DEFAULT_SETTINGS, ...await this.loadData() };
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  clearHTMLTags(strToSanitize) {
    return strToSanitize.replace(/(<([^>]+)>)/gi, "");
  }
  betterClearHTMLTags(strToSanitize) {
    let myHTML = new DOMParser().parseFromString(strToSanitize, "text/html");
    return myHTML.body.textContent || "";
  }
  // index: 1-based
  addStyleCommand(style, index) {
    const isHighlight = style.css.indexOf("background-color") !== -1;
    const tag = isHighlight ? "mark" : "span";
    this.addCommand({
      id: `style${index}`,
      name: `${style.name}`,
      editorCallback: (editor, view) => {
        const selection = editor.getSelection();
        editor.replaceSelection(`<${tag} style="${style.css}">${selection}</${tag}>`);
      }
    });
  }
  updateBodyListClass() {
    document.body.classList.add("style-text");
  }
};
//# sourceMappingURL=data:application/json;base64,
